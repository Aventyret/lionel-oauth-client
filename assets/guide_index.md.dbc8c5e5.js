import{_ as e,c as t,o as n,a}from"./app.f5eb41e9.js";const g='{"title":"Getting Started","description":"","frontmatter":{},"headers":[{"level":2,"title":"Overview","slug":"overview"},{"level":2,"title":"Browser Support","slug":"browser-support"},{"level":2,"title":"How to get going","slug":"how-to-get-going"},{"level":3,"title":"Installation","slug":"installation"},{"level":3,"title":"Initialize and configure client","slug":"initialize-and-configure-client"},{"level":3,"title":"Setup callback","slug":"setup-callback"},{"level":3,"title":"Client methods","slug":"client-methods"},{"level":3,"title":"Event subscription","slug":"event-subscription"}],"relativePath":"guide/index.md"}',s={},o=a(`<h1 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-hidden="true">#</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-hidden="true">#</a></h2><p>This library is an independent successor of the widely used <a href="https://github.com/IdentityModel/oidc-client-js" target="_blank" rel="noopener noreferrer">oidc-client</a> library, that was archived in 2021.</p><p>You can use it for browser based oAuth, with or without OIDC. There is no support for the oAuth implicit flow: you need to use code flow with PKCE, which is now considered best practise for browser based oAuth.</p><p>Things that this library provides:</p><ul><li>An easy to use oAuth/OIDC implementation</li><li>Stability and consistency on the oAuth client side</li><li>Light footprint: makes use of the browser&#39;s crypto api</li></ul><p>While we hope to lower the threshold of working with oAuth, we still recommend users to have an understaning of the concepts of oAuth. Checkout out the <a href="/lionel-oauth-client/resources/">resources</a> section for some recommended (if not always easy to comprehend) reading.</p><h2 id="browser-support" tabindex="-1">Browser Support <a class="header-anchor" href="#browser-support" aria-hidden="true">#</a></h2><p>The library works with modern browsers. Also works with IE11, but it users <code>Promise</code> and <code>TextEncoder</code>, so you will need to implement solutions for those if you want Internet Explorer support.</p><h2 id="how-to-get-going" tabindex="-1">How to get going <a class="header-anchor" href="#how-to-get-going" aria-hidden="true">#</a></h2><h3 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-hidden="true">#</a></h3><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> lionel-oauth-client
</code></pre></div><div class="language-bash"><pre><code><span class="token function">yarn</span> <span class="token function">add</span> lionel-oauth-client
</code></pre></div><h3 id="initialize-and-configure-client" tabindex="-1">Initialize and configure client <a class="header-anchor" href="#initialize-and-configure-client" aria-hidden="true">#</a></h3><p>The library exposes two factory functions \u2013 <code>createOauthClient</code> for basic oAuth with Authorization Code Grant and the PKCE extension and <code>createOidcClient</code> if you want to leverage OIDC (also with code flow + PCKE).</p><p>Choose the one best suitable for your needs. They both return an <code>OauthClient</code>, but they have differernt default config options.</p><h4 id="createoauthclient" tabindex="-1">createOauthClient <a class="header-anchor" href="#createoauthclient" aria-hidden="true">#</a></h4><p>Create your client with settings for your oAuth issuer. See full list of config attributes in the <a href="/lionel-oauth-client/api/#configuration">API section</a>.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createOauthClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;lionel-oauth-client&#39;</span>

<span class="token keyword">const</span> oAuthClient <span class="token operator">=</span> <span class="token function">createOauthClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  issuer<span class="token punctuation">,</span> <span class="token comment">// Required, e.g. issuer: &#39;https://sso.example.com&#39;</span>
  clientId<span class="token punctuation">,</span> <span class="token comment">// Required, e.g. clientId: &#39;example_app&#39;</span>
  redirectUri<span class="token punctuation">,</span> <span class="token comment">// Required, e.g. clientId: &#39;http://localhost:3001/oauth-callback.html&#39;</span>
  scopes <span class="token comment">// Optional, e.g. [&#39;api&#39;]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h4 id="createoidcclient" tabindex="-1">createOidcClient <a class="header-anchor" href="#createoidcclient" aria-hidden="true">#</a></h4><p>An alternative way to create your client, when you use OpenID Connect. The same arguments are supported as for <code>createOauthClient</code>, but defaults and requirements differ slightly. For instance <code>openid</code> will be added to scopes automatically.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createOidcClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;lionel-oauth-client&#39;</span>

<span class="token keyword">const</span> oAuthClient <span class="token operator">=</span> <span class="token function">createOidcClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  issuer<span class="token punctuation">,</span> <span class="token comment">// Required, e.g. issuer: &#39;https://sso.example.com&#39;</span>
  clientId<span class="token punctuation">,</span> <span class="token comment">// Required, e.g. clientId: &#39;example_app&#39;</span>
  redirectUri<span class="token punctuation">,</span> <span class="token comment">// Required, e.g. clientId: &#39;http://localhost:3001/oidc-callback.html&#39;</span>
  scopes <span class="token comment">// Optional, e.g. [&#39;api&#39;, &#39;email&#39;]. Defaults to [&#39;openid&#39;]. &#39;openid&#39; will always be added if not included</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="setup-callback" tabindex="-1">Setup callback <a class="header-anchor" href="#setup-callback" aria-hidden="true">#</a></h3><p>For the authentication to work you need to set up a page where you handle the redirect response from your issuer. On that page you should call <code>oAuthClient.handleCallback()</code> \u2013 make sure that the client was created with the same config options as the client that initiated the authentication.</p><p>The absolute uri of the page where you handle the callback is what you should set as <code>redirectUri</code> when you create your client.</p><p>The same callback page will be used in all authorizations: sign in with redirect, sign in silently, auto renewal of tokens and authentication checks after session monitoring has indicatied a session change at the issuer.</p><h3 id="client-methods" tabindex="-1">Client methods <a class="header-anchor" href="#client-methods" aria-hidden="true">#</a></h3><p>A complete list of client methods and their arguments can be found in the <a href="/lionel-oauth-client/api/#client-methods">API section</a>.</p><h3 id="event-subscription" tabindex="-1">Event subscription <a class="header-anchor" href="#event-subscription" aria-hidden="true">#</a></h3><p>The client publishes events when things that have to do with authentication happens that you can subscribe to.</p><p>A complete list of events and details on how you subscribe to them can be found in the <a href="/lionel-oauth-client/api/#events">API section</a>.</p>`,31),i=[o];function c(l,r,p,h,d,u){return n(),t("div",null,i)}var m=e(s,[["render",c]]);export{g as __pageData,m as default};
